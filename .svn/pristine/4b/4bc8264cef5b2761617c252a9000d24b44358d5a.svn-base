package com.bmtc.script.service.Impl;

import java.io.File;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.tmatesoft.svn.core.SVNException;

import com.bmtc.common.config.BMTCConfig;
import com.bmtc.common.domain.Tree;
import com.bmtc.common.utils.BuildTree;
import com.bmtc.common.utils.Query;
import com.bmtc.device.service.TestCaseService;
import com.bmtc.script.dao.ScriptDao;
import com.bmtc.script.domain.Script;
import com.bmtc.script.service.ScriptService;
import com.bmtc.svn.service.UpdateLocalCodeBySvnRepoService;
import com.bmtc.task.dao.TaskScriptDao;
import com.bmtc.task.domain.TaskScriptDO;
/**
 * 脚本管理的service实现类
 * @author Administrator
 *
 */
@Service
@Transactional
public class ScriptServiceImpl implements ScriptService {

	private static Logger logger = Logger.getLogger(ScriptServiceImpl.class);
	@Autowired
	ScriptDao scriptMapper;
	@Autowired
	TaskScriptDao taskScriptMapper;
	@Autowired
	BMTCConfig bmtcConfig;
	@Autowired
	TestCaseService testCaseService;
	@Autowired
	private UpdateLocalCodeBySvnRepoService updateLocalCodeBySvnRepoService;
	
	/**
	 * 查询脚本列表数据
	 * @param Query query
	 * @return List<Script>
	 */
	@Override
	public List<Script> list(Query query) {
		logger.info("ScriptServiceImpl.list() start");
		List<Script> scripts = scriptMapper.list(query);
		logger.info("ScriptServiceImpl.list() end");
		return scripts;
	}
	/**
	 * 查询总记录数
	 * @param Query query
	 * @return int
	 */
	@Override
	public int count(Query query) {
		logger.info("ScriptServiceImpl.count() start");
		int count = scriptMapper.count(query);
		logger.info("ScriptServiceImpl.count() end");
		return count;
	}
	/**
	 * 更新数据库脚本信息
	 * @param 
	 * @return boolean
	 */
	@Override
	public boolean updateScriptData() {
		logger.info("ScriptServiceImpl.updateScriptData() start");
		// 调用svn接口，扫描svn库，下载库中测试套到本地
		long scriptVersion =0;
		File file = new File(bmtcConfig.getLocalPath());
		// 如果文件夹不存在，创建文件夹
		if(!file.exists()){
			file.mkdir();
		}
		try {
			// 下载脚本
			scriptVersion = updateLocalCodeBySvnRepoService.updateLocalCodeBySvnRepo(bmtcConfig.getUrl(), 
					bmtcConfig.getUsername(), bmtcConfig.getPassword(), file, null);
			logger.info("测试脚本版本 {"+ scriptVersion +"}");
			// 全量直接解析入库，增量根据操作类型，调整数据库数据，然后同步
			if(!parseScript(file)){
				logger.error("脚本信息同步数据库异常，请检查更新数据库脚本信息逻辑");
				// 返回同步跟新失败
				return false;
			}
			logger.info("ScriptServiceImpl.updateScriptData() end");
			// 返回同步跟新成功
			return true;
		} catch (SVNException e) {
			logger.error(e.getMessage());
			logger.error("svn下载脚本异常，请检查svn参数是否正确");
			e.printStackTrace();
			// 返回同步跟新失败
			return false;
		}
	}
	/**
	 * 遍历下载的脚本，更新数据库脚本信息
	 * @param file
	 * @return boolean
	 */
	private boolean parseScript(File file) {
		// 获取库里所有的脚本
		List<Script> list = scriptMapper.list(new HashMap<String, Object>());
		// 获取该路径下的文件及文件夹
		File[] files = file.listFiles();
		// 遍历
		for (File f : files) {
			// 如果是文件
			if(f.isFile()){
				String absolutePath = f.getAbsolutePath();
				// 如果以".txt"结尾
				if(absolutePath.endsWith(".txt")){
					// 查询数据库是否存在这条数据
					Script script = scriptMapper.getScriptByTestSuitPath(absolutePath);
					// 如果script不为空,修改
					if(script != null){
						// 解析测试套
						List<String> caseNames = testCaseService.getTestCaseName(absolutePath);
						String caseName = caseNames.toString().substring(1, caseNames.toString().length()-2);
						String scriptName = absolutePath.substring(absolutePath.lastIndexOf("/")+1);
						// 封装脚本实例
						script.setCaseNames(caseName);
						script.setGmtModified(new Date(System.currentTimeMillis()));
						script.setScriptName(scriptName);
						scriptMapper.update(script);
						list.remove(script);
					} else {// 如果script为空，添加
						script = new Script();
						// 解析测试套
						List<String> caseNames = testCaseService.getTestCaseName(absolutePath);
						String scriptName = absolutePath.substring(absolutePath.lastIndexOf("/")+1);
						script.setScriptName(scriptName);
						script.setGmtModified(new Date(System.currentTimeMillis()));
						if (caseNames.size() == 0) {
							// 封装脚本实例
							script.setCaseNames("");
							scriptMapper.save(script);
						}
						String caseName = caseNames.toString().substring(1, caseNames.toString().length()-2);
						// 封装脚本实例
						script.setCaseNames(caseName);
						scriptMapper.save(script);
					}
				}
			} else {// 如果是文件夹
				parseScript(f);
			}
		}
		// 遍历list,删除库中多余元素
		for (Script script : list) {
			scriptMapper.remove(script.getScriptId());
		}
		return true;
	}
	// 通过id查询脚本信息
	/**
	 * 
	 * @param Long scriptId
	 * @return Script
	 */
	@Override
	public Script get(Long scriptId) {
		logger.info("ScriptServiceImpl.get() start");
		Script script = scriptMapper.get(scriptId);
		logger.info("ScriptServiceImpl.get() end");
		return script;
	}
	/**
	 * 测试任务添加页面查询关联脚本数据(树形结构)(add.html)
	 * @param 
	 * @return Tree<Script>
	 */
	@Override
	public Tree<Script> getTree() {
		logger.info("ScriptServiceImpl.getTree() start");
		// 创建一个list集合，存储节点数据
		List<Tree<Script>> trees = new ArrayList<Tree<Script>>();
		// 数据库查询脚本信息
		List<Script> scripts = scriptMapper.list(new HashMap<String,Object>(16));
		// 遍历脚本信息
		for (Script script : scripts) {
			// 创建一个节点对象
			Tree<Script> tree = new Tree<Script>();
			// 将脚本的ID作为
			tree.setId(script.getScriptId().toString());
			// 只显示脚本列表，所以，所有parentId均为0
			tree.setParentId("0");
			// 将脚本的名称作为节点名称
			tree.setText(script.getScriptName());
			// 创建Map存储节点状态：(opened/closed)
			Map<String, Object> state = new HashMap<>(16);
			state.put("closed", true);
			tree.setState(state);
			// 将这个节点对象存储到trees集合中
			trees.add(tree);
		}
		// 默认顶级菜单为０，根据数据库实际情况调整
		Tree<Script> t = BuildTree.build(trees);
		logger.info("ScriptServiceImpl.getTree() end");
		return t;
	}
	/**
	 * 查询脚本关联的casename(树形结构)(script.html)
	 * @param Long scriptId
	 * @return Tree<String>
	 */
	@Override
	public Tree<String> getTree(Long scriptId) {
		logger.info("ScriptServiceImpl.getTree(Long scriptId) start");
		// 创建一个list集合，存储节点数据
		List<Tree<String>> trees = new ArrayList<Tree<String>>();
		// 数据库查询脚本关联案例信息
		String[] caseNames = scriptMapper.get(scriptId).getCaseNames().split(",");
		// 遍历脚本信息
		for (int i = 0; i < caseNames.length; i++) {
			// 创建一个节点对象
			Tree<String> tree = new Tree<String>();
			tree.setId(i+"");
			// 只显示案例列表，所以，所有parentId均为0
			tree.setParentId("0");
			// 将案例的名称作为节点名称
			tree.setText(caseNames[i]);
			// 创建Map存储节点状态：(opened/closed)
			Map<String, Object> state = new HashMap<>(16);
			state.put("opened", true);
			tree.setState(state);
			// 将这个节点对象存储到trees集合中
			trees.add(tree);
		}
		// 默认顶级菜单为０，根据数据库实际情况调整
		Tree<String> t = BuildTree.build(trees);
		logger.info("ScriptServiceImpl.getTree(Long scriptId) end");
		return t;
	}
	/**
	 * 查询测试任务列表页面关联脚本的展示信息(树形结构)(task.html)
	 * @param Long taskId
	 * @return Tree<Script>
	 */
	@Override
	public Tree<Script> getTaskScriptTreeData(Long taskId) {
		logger.info("ScriptServiceImpl.getTaskScriptTreeData() start");
		// 获取该测试相关的脚本数据
		List<Script> scripts = taskScriptMapper.getScript(taskId);
		// 创建一个list集合，存储节点数据
		if(scripts == null || scripts.size() == 0){
			logger.info("ScriptServiceImpl.getTaskScriptTreeData() end");
			return null;
		}
		List<Tree<Script>> trees = new ArrayList<Tree<Script>>();
		// 遍历脚本信息
		for (Script script : scripts) {
			// 创建一个节点对象
			Tree<Script> tree = new Tree<Script>();
			// 将脚本的ID作为
			tree.setId(script.getScriptId().toString());
			// 父ID
			tree.setParentId("0");
			// 将脚本的名称作为节点名称
			tree.setText(script.getScriptName());
			// 创建Map存储节点状态：(opened/closed)
			Map<String, Object> state = new HashMap<>(16);
			state.put("closed", true);
			tree.setState(state);
			// 将这个节点对象存储到trees集合中
			trees.add(tree);
			// 获取关联的caseNames
			Long scriptId = script.getScriptId();
			List<TaskScriptDO> taskScripts = taskScriptMapper.getTaskScript(taskId,scriptId);
			TaskScriptDO taskScriptDO = null;
			for (TaskScriptDO ts : taskScripts) {
				if(ts.getScriptId() == scriptId){
					taskScriptDO = ts;
				}
			}
			if(taskScriptDO == null){
				return null;
			}
			String checkedCaseName = taskScriptDO.getCheckedCaseName();
			checkedCaseName = checkedCaseName.substring(1, checkedCaseName.lastIndexOf("]"));
			// 遍历caseNames
			for (String caseName : checkedCaseName.split(",")) {
				// 创建一个节点对象
				Tree<Script> t = new Tree<Script>();
				// 将"脚本+caseName"的caseNameID作为
				t.setId(script.getScriptId().toString()+caseName);
				// 父ID为对应脚本ID
				t.setParentId(script.getScriptId().toString());
				// 将caseName的名称作为节点名称
				t.setText(caseName); 
				// 将这个节点对象存储到trees集合中
				trees.add(t);
			}
			
		}
		// 默认顶级菜单为０，根据数据库实际情况调整
		Tree<Script> t = BuildTree.build(trees);
		logger.info("ScriptServiceImpl.getTaskScriptTreeData() end");
		return t;
	}
	/**
	 * 获取测试任务关联脚本Tree信息
	 * @param String svnName
	 * @return List<Tree<String>>
	 */
	@Override
	public List<Tree<String>> getTreeData(String svnName) {
		logger.info("ScriptServiceImpl.getTreeData() start");
		// 创建List<Tree>存储测试任务相关的脚本数据
		List<Tree<String>> trees = new ArrayList<Tree<String>>();
		// 从配置文件常量中获取SvnRpoPath,注释部分为未完善的逻辑 TODO svnName
		File file = new File(bmtcConfig.getSvnRpoPath()/* + svnName*/);
		// 解析此路径下所有文件为树形结构
		List<Tree<String>> tree = pathToTree(file,trees);
		// 默认顶级菜单为０，根据数据库实际情况调整
		List<Tree<String>> t = BuildTree.buildList(tree, file.getAbsolutePath());
		logger.info("ScriptServiceImpl.getTreeData() end");
		return t;
	}
	
	/**
	 * 将路径拆分转换为存在父子关系的List<PathTree>
	 * @param File file,List<Tree<String>> trees
	 * @return List<Tree<String>>
	 */
	public List<Tree<String>> pathToTree(File file,List<Tree<String>> trees) {
		Tree<String> root = new Tree<String>();
		root.setId(file.getAbsolutePath());
		root.setParentId(file.getParentFile().getAbsolutePath());
		root.setText(file.getName());
		// 获取指定SVN路径下的所有子文件
		File[] files = file.listFiles();
		// 遍历子文件集
		for (int i = 0; i < files.length; i++) {
			// 判断此元素是文件还是文件夹
			if(files[i].isFile()){ // 如果是文件，存储到List<PathTree>
				// 转换数据为PathTree
				Tree<String> pathTree = getPathTree(files[i]);
				// 将根节点存到集合中
				trees.add(pathTree);
				// 解析此文件下的caseName
				List<String> caseNames = testCaseService.getTestCaseName(files[i].getAbsolutePath());
				if(caseNames == null){
					continue;
				}
				for (String caseName : caseNames) {
					Tree<String> tree = new Tree<String>();
					tree.setId(files[i].getAbsolutePath() + "\\" + caseName);
					tree.setParentId(files[i].getAbsolutePath());
					tree.setText(caseName);
					trees.add(tree);
				}
			} else { // 如果是文件夹，存储到List<PathTree>并递归
				// 转换数据为PathTree
				Tree<String> pathTree = getPathTree(files[i]);
				// 将根节点存到集合中
				trees.add(pathTree);
				// 递归调用自身，解析路径
				pathToTree(files[i],trees);
			}
		}
		return trees;
	}
	/**
	 * 转换数据为PathTree
	 * @param File file
	 * @return Tree<String>
	 */
	private static Tree<String> getPathTree(File file) {
		// 创建pathTree对象
		Tree<String> tree = new Tree<String>();
		// 主键为其绝对路径
		tree.setId(file.getAbsolutePath());
		// 父id为其父目录的绝对路径
		tree.setParentId(file.getParentFile().getAbsolutePath());
		// 展示文本为目录名称
		tree.setText(file.getName());
		// 返回结果
		return tree;
	}
	/**
	 * 获取测试任务关联脚本Tree信息
	 * @param String svnName, Long taskId
	 * @return List<Tree<String>>
	 */
	@Override
	public List<Tree<String>> getTaskUpdateTreeData(String svnName, Long taskId) {
		logger.info("ScriptServiceImpl.getTaskUpdateTreeData() start");
		// 创建List<Tree>存储测试任务相关的脚本数据
		List<Tree<String>> trees = new ArrayList<Tree<String>>();
		// 从配置文件常量中获取SvnRpoPath,注释部分为未完善逻辑 TODO svnName
		File file = new File(bmtcConfig.getSvnRpoPath() /*+ svnName*/);
		// 解析此路径下所有文件为树形结构
		List<Tree<String>> treeList = pathToTree(file,trees);
		// 获取任务关联的caseName
		List<TaskScriptDO> taskScriptsDos = taskScriptMapper.getTaskScriptByTaskId(taskId);
		for (TaskScriptDO taskScriptDO : taskScriptsDos) {
			String checkedCaseNames = taskScriptDO.getCheckedCaseName();
			String[] caseNames = checkedCaseNames.split(",");
			for (String caseName : caseNames) {
				for (Tree<String> tree : treeList) {
					if(tree.getId().contains(caseName)){
						tree.setChecked(true);
					}
				}
			}
		}
		// 默认顶级菜单为０，根据数据库实际情况调整
		List<Tree<String>> t = BuildTree.buildList(treeList, file.getAbsolutePath());
		logger.info("ScriptServiceImpl.getTaskUpdateTreeData() end");
		return t;
	}
}
