package com.bmtc.task.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bmtc.common.annotation.Log;
import com.bmtc.common.controller.BaseController;
import com.bmtc.common.domain.Tree;
import com.bmtc.common.utils.PageUtils;
import com.bmtc.common.utils.Query;
import com.bmtc.common.utils.R;
import com.bmtc.common.utils.ShiroUtils;
import com.bmtc.script.service.ScriptService;
import com.bmtc.system.service.DeptService;
import com.bmtc.task.domain.BMTCTask;
import com.bmtc.task.service.BMTCTaskService;

/**
 * 测试任务的controller
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/task")
public class BMTCTaskController extends BaseController{

	private static Logger logger = Logger.getLogger(BMTCTaskController.class);
	// 返回映射路径的前缀
	private String prefix = "task";
	@Autowired
	BMTCTaskService bMTCTaskService;
	@Autowired
	ScriptService scriptService;
	@Autowired
	private DeptService sysDeptService;
	@Autowired
	DeptService deptService;
	
	/**
	 * 前段请求访问测试任务列表页面
	 * @return String
	 */
	@RequiresPermissions("test:task:task")
	@GetMapping()
	String task() {
		logger.info("BMTCTaskController.task() start");
		logger.info("BMTCTaskController.task() end");
		return prefix + "/task";
	}
	/**
	 * 查询测试任务数据
	 * @param params
	 * @return PageUtils
	 */
	@GetMapping("/list")
	@RequiresPermissions("test:task:list")
	@ResponseBody
	PageUtils list(@RequestParam Map<String, Object> params) {
		logger.info("BMTCTaskController.list() start");
		if(!params.containsKey("deptId") || params.get("deptId").equals(null)){
			params.put("deptId", getDeptId());
		}
		// 分页查询参数数据
		Query query = new Query(params);
		// 查询数据库查询测试任务数据
		List<BMTCTask> taskList = bMTCTaskService.list(query);
		// 查询总记录数
		int total = bMTCTaskService.count(query);
		// 封装到返回对象
		PageUtils pageUtil = new PageUtils(taskList, total);
		
		logger.info("BMTCTaskController.list() end");
		
		// 返回数据
		return pageUtil;
	}
	/**
	 * 前段访问测试任务数据列表页面
	 * @param 
	 * @return String
	 */
	@GetMapping("/showTaskList")
	String showTaskList() {
		logger.info("BMTCTaskController.getTaskList() start");
		// 查询数据库查询测试任务数据
		logger.info("BMTCTaskController.getTaskList() end");
		// 返回数据
		return prefix + "/showTaskList";
	}
	/**
	 * 查询测试任务数据列表
	 * @param 
	 * @return Tree<BMTCTask>
	 */
	@GetMapping("/getTaskListTree")
	@ResponseBody
	Tree<BMTCTask> getTaskListTree() {
		logger.info("BMTCTaskController.getTaskListTree() start");
		// 查询数据库查询测试任务数据
		Tree<BMTCTask> taskTreeList = bMTCTaskService.getTaskList(ShiroUtils.getUser().getDeptId());
		logger.info("BMTCTaskController.getTaskListTree() end");
		// 返回数据
		return taskTreeList;
	}
	/**
	 * 测试任务add页面跳转
	 * @param model
	 * @return String
	 */
	@RequiresPermissions("test:task:add")
	@Log("添加测试任务")
	@GetMapping("/add")
	String add(Model model) {
		logger.info("BMTCTaskController.add() start");
		/**
		 * 库名绑定产品，所以添加测试任务时，页面显示readOnly的svn库路径
		 */
		String svnName = deptService.get(getDeptId()).getSvnName();
		model.addAttribute("svnName", svnName);
		model.addAttribute("deptName", getDeptName());
		logger.info("BMTCTaskController.add() end");
		return prefix + "/add";
	}
	
	/**
	 * 保存测试任务
	 * @param BMTCTask bmtcTask
	 * @return R
	 */
	@RequiresPermissions("test:task:add")
	@Log("保存测试任务")
	@PostMapping("/save")
	@ResponseBody
	R save(BMTCTask bmtcTask) {
		logger.info("BMTCTaskController.save() start");
		// TODO 测试打印
		System.out.println(bmtcTask);
		if(bmtcTask.getDeptId() == null){
			bmtcTask.setDeptId(Long.valueOf(getDeptId().toString()));
		}
		if (bMTCTaskService.save(bmtcTask) > 0) {
			logger.info("BMTCTaskController.save() end");
			return R.ok();
		}
		logger.info("BMTCTaskController.save() end");
		return R.error();
	}
	/**
	 * 测试任务edit页面跳转
	 * @param Long taskId
	 * @return String
	 */
	@RequiresPermissions("test:task:edit")
	@GetMapping("/edit/{taskId}")
	String edit(Model model, @PathVariable("taskId") Long taskId) {
		logger.info("BMTCTaskController.edit() start");
		BMTCTask bMTCTask = bMTCTaskService.get(taskId);
		model.addAttribute("bMTCTask", bMTCTask);
		model.addAttribute("deptName", getDeptName());
		model.addAttribute("svnName", getSvnName());
		logger.info("BMTCTaskController.edit() end");
		return prefix+"/edit";
	}
	/**
	 * 测试任务修改
	 * @param BMTCTask bMTCTask
	 * @return R
	 */
	@RequiresPermissions("test:task:edit")
	@PostMapping("/update")
	@ResponseBody
	R update(BMTCTask bMTCTask) {
		logger.info("BMTCTaskController.update() start");
		if (bMTCTaskService.update(bMTCTask) > 0) {
			logger.info("BMTCTaskController.update() end");
			return R.ok();
		}
		logger.info("BMTCTaskController.update() end");
		return R.error();
	}
	
	/**
	 * 测试任务批量删除
	 * @param taskIds
	 * @return R
	 */
	@RequiresPermissions("test:task:batchRemove")
	@Log("批量删除用户")
	@PostMapping("/batchRemove")
	@ResponseBody
	R batchRemove(@RequestParam("ids[]") Long[] taskIds) {
		logger.info("BMTCTaskController.batchRemove() start");
		int r = bMTCTaskService.batchremove(taskIds);
		if (r > 0) {
			logger.info("BMTCTaskController.batchRemove() end");
			return R.ok();
		}
		logger.info("BMTCTaskController.batchRemove() end");
		return R.error();
	}
	/**
	 * 测试任务删除
	 * @param taskIds
	 * @return R
	 */
	@RequiresPermissions("test:task:remove")
	@Log("删除测试任务")
	@PostMapping("/remove")
	@ResponseBody
	R remove(@RequestParam("id") Long taskIds) {
		logger.info("BMTCTaskController.remove() start");
		int r = bMTCTaskService.remove(taskIds);
		if (r > 0) {
			logger.info("BMTCTaskController.remove() end");
			return R.ok();
		}
		logger.info("BMTCTaskController.remove() end");
		return R.error();
	}
	/**
	 * 查询测试任务名称是否存在
	 * @param params
	 * @return boolean
	 */
	@PostMapping("/exist")
	@ResponseBody
	boolean exist(@RequestParam Map<String, Object> params) {
		logger.info("BMTCTaskController.exist() start");
		logger.info("BMTCTaskController.exist() end");
		// 存在，不通过，false
		return !bMTCTaskService.exist(params);
	}
	/**
	 * 获取测试任务关联脚本Tree信息
	 * @param 
	 * @return List<Tree<String>>
	 */
	@GetMapping("/getTreeData")
	@ResponseBody
	public List<Tree<String>> getTreeData() {
		logger.info("ScriptController.getTreeData() start");
		List<Tree<String>> tree = new ArrayList<Tree<String>>();
		tree = scriptService.getTreeData(getSvnName());
		logger.info("ScriptController.getTreeData() end");
		return tree;
	}
	/**
	 * 获取测试任务关联脚本Tree信息
	 * @param Long taskId
	 * @return List<Tree<String>>
	 */
	@GetMapping("/getTaskUpdateTreeData/{taskId}")
	@ResponseBody
	public List<Tree<String>> getTaskUpdateTreeData(@PathVariable("taskId") Long taskId) {
		logger.info("ScriptController.getTreeData() start");
		List<Tree<String>> tree = new ArrayList<Tree<String>>();
		tree = scriptService.getTaskUpdateTreeData(getSvnName(),taskId);
		logger.info("ScriptController.getTreeData() end");
		return tree;
	}
}
